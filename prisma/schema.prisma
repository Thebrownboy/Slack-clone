// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Workspace Workspace[]
  Member    Members[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Role {
  admin
  member
}

model Channels {
  id          String    @id @default(cuid())
  name        String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  Message     Message[]

  @@index([workspaceId])
}

model Message {
  id              String    @id @default(cuid())
  body            String
  imageId         String?
  image           Images?   @relation(fields: [imageId], references: [id], onDelete: Cascade)
  memberId        String
  workspaceId     String
  member          Members   @relation(fields: [memberId, workspaceId], references: [userId, workspaceId], onDelete: Cascade)
  channelId       String?
  channel         Channels? @relation(fields: [channelId], references: [id], onDelete: Cascade)
  updatedAt       DateTime  @updatedAt
  creationTime    DateTime  @default(now())
  parentMessageId String?
  parentMessage   Message?  @relation("messageReplies", fields: [parentMessageId], references: [id], onDelete: Cascade)
  replies         Message[] @relation("messageReplies")

  conversationId String?
  converstion    Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  reactions      reactions[]

  @@index([workspaceId])
  @@index([memberId])
  @@index([channelId])
  @@index([conversationId])
  @@index([channelId, parentMessageId, conversationId])
}

model Images {
  id          String    @id
  publicId    String
  width       Int
  height      Int
  createdAt   DateTime  @default(now())
  URL         String
  displayName String
  Message     Message[]
}

model Workspace {
  joinCode     String
  name         String
  userId       String
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Member       Members[]
  Channels     Channels[]
  Conversation Conversation[]
  reactions    reactions[]
}

model Members {
  userId      String
  workspaceId String
  role        Role

  user                User                  @relation(fields: [userId], references: [id])
  workspace           Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  // this will optimize the queries that are using userId and workspaceId in the where clause 
  Message             Message[]
  ConversationMembers ConversationMembers[]
  reactions           reactions[]

  @@id([userId, workspaceId])
  // this will optimize the queries that are using userId in the where clause 
  @@index([userId])
  // this will optimize the queries that are using workspaceId in the where clause 
  @@index([workspaceId])
  @@index([userId, workspaceId])
}

model Conversation {
  id          String    @id @default(cuid()) // Unique conversation ID
  memberOneId String
  memberTwoId String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  ConversationMembers ConversationMembers[]
  Message             Message[]
}

model ConversationMembers {
  conversationId String // Foreign key to the Conversation model
  memberId       String // Foreign key to the Members model
  workspaceId    String // Foreign key to the Workspace model

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  member       Members      @relation(fields: [memberId, workspaceId], references: [userId, workspaceId], onDelete: Cascade)

  @@id([conversationId, memberId, workspaceId]) // Composite primary key
}

model reactions {
  id          String @id @default(cuid())
  workspaceId String
  messageId   String
  memberId    String

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  member    Members   @relation(fields: [memberId, workspaceId], references: [userId, workspaceId], onDelete: Cascade)

  @@index([workspaceId])
  @@index([messageId])
  @@index([memberId])
}
