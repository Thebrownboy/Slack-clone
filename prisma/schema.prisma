// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Workspace Workspace[]
  Member    Member[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Workspace {
  joinCode  String
  name      String
  userId    String
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Member    Member[]
}

enum Role {
  admin
  member
}

model Member {
  userId      String
  workspaceId String
  role        Role

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  // this will optimize the queries that are using userId and workspaceId in the where clause 

  @@id([userId, workspaceId])
  // this will optimize the queries that are using userId in the where clause 
  @@index([userId])
  // this will optimize the queries that are using workspaceId in the where clause 
  @@index([workspaceId])
  @@index([userId, workspaceId])
}
